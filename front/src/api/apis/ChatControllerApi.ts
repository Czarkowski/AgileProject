/* tslint:disable */
/* eslint-disable */
/**
 * Api V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatMessageDto,
} from '../models/index';
import {
    ChatMessageDtoFromJSON,
    ChatMessageDtoToJSON,
} from '../models/index';

export interface GetHistoryRequest {
    projectId: number;
    dateFrom: Date;
    dateTo: Date;
}

/**
 * 
 */
export class ChatControllerApi extends runtime.BaseAPI {

    /**
     */
    async getHistoryRaw(requestParameters: GetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatMessageDto>>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getHistory().'
            );
        }

        if (requestParameters['dateFrom'] == null) {
            throw new runtime.RequiredError(
                'dateFrom',
                'Required parameter "dateFrom" was null or undefined when calling getHistory().'
            );
        }

        if (requestParameters['dateTo'] == null) {
            throw new runtime.RequiredError(
                'dateTo',
                'Required parameter "dateTo" was null or undefined when calling getHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dateFrom'] != null) {
            queryParameters['dateFrom'] = (requestParameters['dateFrom'] as any).toISOString();
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['dateTo'] = (requestParameters['dateTo'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/chats/project-messages/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatMessageDtoFromJSON));
    }

    /**
     */
    async getHistory(requestParameters: GetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatMessageDto>> {
        const response = await this.getHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
